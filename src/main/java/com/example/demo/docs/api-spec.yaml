# yaml-language-server: $schema=https://json-schema.org/draft/2020-12/schema
openapi: 3.0.3
info:
  title: E-Commerce-API Spec
  description: 電商API功能規劃
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: users
    description: "使用者相關操作"
  - name: products
    description: "商品相關操作"
  - name: categories
    description: "商品分類相關操作"
  - name: carts
    description: "購物車相關操作"
  - name: orders
    description: "訂單相關操作"
  - name: events
    description: "活動相關操作"
paths:
  /users/login:
    post:
      tags:
        - users
      summary: "使用者登入"
      description: "使用者輸入帳號密碼進行登入"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: "登入成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example: 
                status: 200
                message: "[/users/login] 登入成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  email: "user@example.com"
                  name: "TEST"
                  token: "Bear xxxxx"
        '400':
          description: "登入失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/users/login] Invalid credentials"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    email: "帳號或密碼錯誤"
                    password: "帳號或密碼錯誤"
  /users/register:
    post:
      tags:
        - users
      summary: "使用者註冊"
      description: "使用者輸入資料進行註冊"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        '200':
          description: "註冊成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example: 
                status: 200
                message: "[/users/register] 註冊成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  email: "Test@gmail.com"
                  name: "Test"
                  birthday: "2025-06-20"
        '400':
          description: "註冊失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/users/register] 註冊失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  email: "格式不符合"
                  password: "密碼未輸入"
        '401': 
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /users/me:
    get:
      tags:
        - users
      summary: "使用者資料查詢"
      description: "查詢目前使用者資料"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "查詢成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/users/me] 取得使用者資料成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  email: "user@example.com"
                  name: "TEST"
        '400':
          description: "查詢失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/users/me] 取得使用者資料失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    put:
      tags:
        - users
      summary: 使用者資料更新
      description: 使用者修改資料或照片
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        '200':
          description: "資料更新成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/users/me put] 更新使用者資料成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "資料更新失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/users/me put] 更新使用者資料失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    image: "照片格是錯誤"
                    birthday: "生日不能大於今日"
                    address: "地址未輸入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /users/me/password:
    patch:
      tags:
        - users
      summary: 使用者修改密碼
      description: 使用者輸入新的密碼進行修改
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        '200':
          description: "密碼修改成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/users/me/password] 更新密碼成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "密碼修改失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/users/me/password] 更新密碼失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    oldPassword: "舊密碼錯誤"
                    NewConfirmPassword: "輸入密碼不一致"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /users/verify/{token}:
    get:
      tags:
        - users
      summary: "使用者驗證"
      description: "驗證使用者是否登入"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: "JWT Token"
      responses:
        '200':
          description: "驗證成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/users/verify/{token}] 使用者驗證成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "驗證失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/users/verify/{token}] 使用者驗證失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /products:
    get:
      tags:
        - products
      summary: "產品列表"
      description: "取得產品列表"
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: categoryId
          required: false
          schema:
            type: integer
          description: "分類ID"
        - in: query
          name: name
          required: false
          schema:
            type: string
          description: "產品名稱"
      responses:
        '200':
          description: "取得產品列表成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/products] 使用者取得產品列表成功"
                timestamp: "2025-06-23T14:00:00"
                products:
                  - id: 1
                    name: "藍芽耳機"
                    price: 2000
                    promotionId: 1
                    imageUrl: "/upload/defaultProduct.jpg"
                    category:
                      id: 1
                      name: "耳機"
                    inStock: 20
                    rating: 4.5
                    soldCount: 36
                    shortDescription: "這是最新款的藍芽耳機，目前折價9折熱賣中"
                    tags: ["熱賣", "新品"]
                  - id: 2
                    name: "無線滑鼠"
                    price: 800
                    promotionId: 1
                    imageUrl: "/upload/defaultProduct2.jpg"
                    category:
                      id: 2
                      name: "滑鼠"
                    inStock: 50
                    rating: 4.0
                    soldCount: 100
                    shortDescription: "這是最新款的無線滑鼠，目前折價9折熱賣中"
                    tags: ["熱賣"]
        '400':
          description: "取得產品列表失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/products/] 使用者取得產品列表失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    post:
      tags:
        - products
      summary: "新增產品"
      description: "新增一個產品"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInfo"
      responses:
        '201':
          description: "新增產品成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 201
                message: "[/products post] 新增產品成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  productId: 1
        '400':
          description: "新增產品失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/products post] 新增產品失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /products/{productId}:
    get:
      tags:
        - products
      summary: "產品內容"
      description: "取得產品內容"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: "產品ID"
      responses:
        '200':
          description: "取得產品內容成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/products/{productId}] 使用者取得產品內容成功"
                timestamp: "2025-06-23T14:00:00"
                product:
                  id: 1
                  name: "藍芽耳機"
                  price: 2000
                  promotionId: 1
                  imageUrl: "/upload/defaultProduct.jpg"
                  category:
                    id: 1
                    name: "耳機"
                  inStock: 20
                  rating: 4.5
                  soldCount: 36
                  shortDescription: "這是最新款的藍芽耳機，目前折價9折熱賣中"
                  tags: ["熱賣", "新品"]
        '400':
          description: "取得產品內容失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/products/{productId}] 使用者取得產品內容失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    put:
      tags:
        - products
      summary: "更新產品"
      description: "更新一個產品的內容"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: "產品ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInfo"
      responses:
        '200':
          description: "更新產品成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/products/{productId} put] 更新產品成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "更新產品失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/products/{productId} put] 更新產品失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    delete:
      tags:
        - products
      summary: "刪除產品"
      description: "刪除一個產品"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
          description: "產品ID"
      responses:
        '200':
          description: "刪除產品成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/products/{productId} delete] 刪除產品成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "刪除產品失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/products/{productId} delete] 刪除產品失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /carts/me:
    get:
      tags:
        - carts
      summary: "使用者購物車"
      description: "取得目前使用者的購物車內容"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "取得購物車內容成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/carts/me] 使用者取得購物車內容成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  carts:
                    - id: 1
                      userId: 1
                      productId: 1
                      quantity: 2
                      price: 2000
                      createAt: "2025-06-23T14:00:00"
                      updateAt: "2025-06-23T14:00:00"
                    - id: 2
                      userId: 1
                      productId: 2
                      quantity: 1
                      price: 800
                      createAt: "2025-06-23T14:00:00"
                      updateAt: "2025-06-23T14:00:00"
        '400':
          description: "取得購物車內容失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/carts/me] 使用者取得購物車內容失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    post:
      tags:
        - carts
      summary: "新增商品到購物車"
      description: "將商品加入目前使用者的購物車"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartInfo"
      responses:
        '200':
          description: "新增商品到購物車成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/carts/me post] 新增商品到購物車成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "新增商品到購物車失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/carts/me post] 新增商品到購物車失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    productId: "產品不存在或已下架"
                    quantity: "數量必須大於0"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    delete:
      tags:
        - carts
      summary: "清空購物車"
      description: "清空目前使用者的購物車內容"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "清空購物車成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/carts/me delete] 清空購物車成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "清空購物車失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/carts/me delete] 清空購物車失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    patch:
      tags:
        - carts
      summary: "更新購物車商品數量"
      description: "更新目前使用者購物車中商品的數量"
      security:
        - bearerAuth: []
      requestBody:
        required:
          quantity: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartInfo"
      responses:
        '200':
          description: "更新購物車商品數量成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/carts/me patch] 更新購物車商品數量成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "更新購物車商品數量失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/carts/me patch] 更新購物車商品數量失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    productId: "產品不存在或已下架"
                    quantity: "數量必須大於0"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /orders:
    get:
      tags:
        - orders
      summary: "使用者訂單列表"
      description: "取得目前使用者的訂單列表"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "取得訂單列表成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/orders] 使用者取得訂單列表成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  orders:
                    - id: 1
                      userId: 1
                      orderNumber: "ORD123456789"
                      status: "PENDING"
                      paymentMethod: "CREDIT_CARD"
                      isPaid: false
                      paidAt: null
                      shippingMethod: "STANDARD"
                      shippingAddress: "台北市中正區某某路123號"
                      shippingStatus: "PENDING"
                      totalPrice: 4000
                      createAt: "2025-06-23T14:00:00"
                      updateAt: "2025-06-23T14:00:00"
        '400':
          description: "取得訂單列表失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/orders] 使用者取得訂單列表失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    post:
      tags:
        - orders
      summary: "建立訂單"
      description: "使用者提交購物車內容建立新的訂單"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
                - paymentMethod
                - shippingMethod
                - shippingAddress
              properties:
                cartId:
                  type: integer
                  example: 123
                  description: "購物車 ID"
                paymentMethod:
                  type: string
                  example: CREDIT_CARD
                  description: "付款方式"
                shippingMethod:
                  type: string
                  example: STANDARD
                  description: "配送方式"
                shippingAddress:
                  type: string
                  example: "台北市中正區某某路123號"
                  description: "配送地址"
      responses:
        '200':
          description: "建立訂單成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/orders post] 使用者建立訂單成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  orderId: 1
        '400':
          description: "建立訂單失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/orders post] 使用者建立訂單失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /orders/{orderId}/items:
    get:
      tags:
        - orders
      summary: "訂單明細"
      description: "取得指定訂單的明細"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: "訂單ID"
      responses:
        '200':
          description: "取得訂單明細成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/orders/{orderId}/items] 使用者取得訂單明細成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  orderDetails:
                    - id: 1
                      productId: 1
                      productName: "藍芽耳機"
                      price: 2000
                      quantity: 2
                      subtotal: 4000
                    - id: 2
                      productId: 2
                      productName: "無線滑鼠"
                      price: 800
                      quantity: 1
                      subtotal: 800
        '400':
          description: "取得訂單明細失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/orders/{orderId}/items] 使用者取得訂單明細失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /orders/{orderId}:
    put:
      tags:
        - orders
      summary: "更新訂單狀態"
      description: "更新指定訂單的狀態"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: "訂單ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderRequest"
      responses:
        '200':
          description: "更新訂單狀態成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/orders/{orderId} put] 更新訂單狀態成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "更新訂單狀態失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/orders/{orderId} put] 更新訂單狀態失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
    delete:
      tags:
        - orders
      summary: "刪除訂單"
      description: "刪除指定訂單"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
          description: "訂單ID"
      responses:
        '200':
          description: "刪除訂單成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/orders/{orderId} delete] 刪除訂單成功"
                timestamp: "2025-06-23T14:00:00"
                data: null
        '400':
          description: "刪除訂單失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/orders/{orderId} delete] 刪除訂單失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError"
  /events:
    get:
      tags:
        - events
      summary: "活動列表"
      description: "取得目前的活動列表"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "取得活動列表成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 200
                message: "[/events] 使用者取得活動列表成功"
                timestamp: "2025-06-23T14:00:00"
                data:
                  events:
                    - id: 1
                      title: "夏季大促銷"
                      description: "全館商品最高折扣50%"
                      startDate: "2025-07-01"
                      endDate: "2025-07-31"
                    - id: 2
                      title: "新品上市"
                      description: "最新款藍芽耳機上市，限時折扣10%"
                      startDate: "2025-06-20"
                      endDate: "2025-07-20"
        '400':
          description: "取得活動列表失敗"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              example:
                status: 400
                message: "[/events] 使用者取得活動列表失敗"
                timestamp: "2025-06-23T14:00:00"
                data:
                  errors:
                    general: "連線異常請重新登入"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/forbiddenError" 
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "OK"
        timestamp:
          type: string
          format: date-time
        data:
          nullable: true
          type: object
    ErrorDetail:
      type: object
      properties:
        errors:
          type: object
          additionalProperties:
            type: string
          example:
            email: "信箱格式不符"
            password: "密碼錯誤"
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: Test@gmail.com
        password:
          type: string
          example: Aa123456
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: "Test@gmail.com"
        password:
          type: string
          example: Aa123456
    UpdateUserRequest:
      type: object
      properties:
        image:
          type: string
          example: /upload/defaultAvater.jpg
        name:
          type: string
          example: "Test"
        gender:
          type: number
          example: 1
        birthday:
          type: string
          format: date
          example: 2025-06-20
        phone:
          type: string
          example: 0912345678
        city:
          type: string
          example: "台北市"
        country:
          type: string
          example: "中正區"
        address:
          type: string
          example: "我家巷口"
    UpdatePasswordRequest:
      type: object
      required:
        - oldPassword
        - newPassword
        - newConfirmPassword
      properties:
        oldPassword:
          type: string
          example: Aa123456
        newPassword:
          type: string
          example: Bb123456
        newConfirmPassword:
          type: string
          example: Bb123456
    UpdateOrderRequest:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, PAID, SHIPPED, COMPLETED, CANCELED]
          example: "PAID"
        shippingMethod:
          type: string
          example: "STANDARD"
        shippingAddress:
          type: string
          example: "台北市中正區某某路123號"
    ProductResponse:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/ProductInfo"
    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductInfo"
        total:
          type: integer
          example: 100
        page:
          type: integer
          example: 1
        pageSize:
          type: integer
          example: 20
    UserInfo:
      type: object
      properties:
        email:
          type: string
          example: Test@gmail.com
        name:
          type: string
          example: "Test"
        birthday:
          type: string
          format: date
          example: 2025-06-20
    ProductInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "藍芽耳機"
        price:
          type: integer
          example: 2000
        promotionId:
          type: integer
          example: 1
        imageUrl:
          type: string
          example: "/upload/defaultProduct.jpg"
        category:
          $ref: "#/components/schemas/CategoryInfo"
        inStock:
          type: integer
          example: 20
        rating:
          type: number
          format: double
          example: 4.5
        soldCount:
          type: integer
          example: 36
        shortDescription:
          type: string
          example: "這是最新款的藍芽耳機，目前折價9折熱賣中"
        tags:
          type: array
          example: ["熱賣","新品"]
    CategoryInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 耳機
    CartInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        productId:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: integer
          example: 2000
        createAt:
          type: string
          format: date-time
          example: "2025-06-23T14:00:00"
        updateAt:
          type: string
          format: date-time
          example: "2025-06-23T14:00:00"
    OrderDetailInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        productId:
          type: integer
          example: 1
        productName:
          type: string
          example: "藍芽耳機"
        price:
          type: integer
          example: 2000
        quantity:
          type: integer
          example: 2
        subtotal:
          type: integer
          example: 4000
    OrderInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        orderNumber:
          type: string
          example: "ORD123456789" 
        status:
          type: string
          example: "PENDING"
        paymentMethod:
          type: string
          example: "CREDIT_CARD"
        isPaid:
          type: boolean
          example: false
        paidAt:
          type: string
          format: date-time
          example: "2025-06-23T14:00:00"
        shippingMethod:
          type: string
          example: "STANDARD"
        shippingAddress:
          type: string
          example: "台北市中正區某某路123號"
        shippingStatus:
          type: string
          example: "PENDING"
        totalPrice:
          type: integer
          example: 4000
        createAt:
          type: string
          format: date-time
          example: "2025-06-23T14:00:00"
        updateAt:
          type: string
          format: date-time
          example: "2025-06-23T14:00:00"
    EventInfo:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "夏季大促銷"
        discountType:
          type: string
          enum: [PERCENTAGE, FIXED]
          example: "PERCENTAGE"
          description: "折扣類型：PERCENTAGE 為百分比折扣，FIXED 為固定金額折扣"
        discountValue:
          type: number
          example: 50
          description: "折扣值：若為百分比則代表百分比（50 表示 50%），若為固定金額則表示折抵金額（如 200 元"
        description:
          type: string
          example: "全館商品最高折扣50%"
        startDate:
          type: string
          format: date-time
          example: "2025-06-01T00:00:00"
        endDate:
          type: string
          format: date-time
          example: "2025-06-30T23:59:59"
        imageUrl:
          type: string
          example: "/upload/event.jpg"
        isActive:
          type: boolean
          example: true
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: "未授權"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            status: 401
            message: "[Unauthorized] 使用者未登入或Token無效"
            timestamp: "2025-06-23T14:00:00"
            data: null
    forbiddenError:
      description: "禁止存取"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            status: 403
            message: "[Forbidden] 使用者無權限存取此資源"
            timestamp: "2025-06-23T14:00:00"
            data: null
    NotFoundError:
      description: "找不到資源"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
          example:
            status: 404
            message: "[NotFound] 資源不存在"
            timestamp: "2025-06-23T14:00:00"
            data: null
  examples:
